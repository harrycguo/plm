'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filters = exports.filterFactory = exports.filterByText = undefined;

var _const = require('./const');

var _comparison = require('./comparison');

var filterByText = exports.filterByText = function filterByText(_) {
  return function (data, dataField, _ref, customFilterValue) {
    var filterVal = _ref.filterVal,
        _ref$comparator = _ref.comparator,
        comparator = _ref$comparator === undefined ? _comparison.LIKE : _ref$comparator;
    return data.filter(function (row) {
      var cell = _.get(row, dataField);
      if (customFilterValue) {
        cell = customFilterValue(cell, row);
      }
      var cellStr = _.isDefined(cell) ? cell.toString() : '';
      if (comparator === _comparison.EQ) {
        return cellStr === filterVal;
      }
      return cellStr.indexOf(filterVal) > -1;
    });
  };
};

var filterFactory = exports.filterFactory = function filterFactory(_) {
  return function (filterType) {
    var filterFn = void 0;
    switch (filterType) {
      case _const.FILTER_TYPE.TEXT:
        filterFn = filterByText(_);
        break;
      default:
        filterFn = filterByText(_);
    }
    return filterFn;
  };
};

var filters = exports.filters = function filters(store, columns, _) {
  return function (currFilters) {
    var factory = filterFactory(_);
    var result = store.getAllData();
    var filterFn = void 0;
    Object.keys(currFilters).forEach(function (dataField) {
      var filterObj = currFilters[dataField];
      filterFn = factory(filterObj.filterType);

      var _columns$find = columns.find(function (col) {
        return col.dataField === dataField;
      }),
          filterValue = _columns$find.filterValue;

      result = filterFn(result, dataField, filterObj, filterValue);
    });
    return result;
  };
};